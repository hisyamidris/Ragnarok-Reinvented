//===== Hercules Script ======================================
//= Kafra Functions
//===== By: ==================================================
//= rAthena Dev Team
//= Darlskies, Darkchild, Syrus22, Lupus, kobra_k88 (2.0)
//= L0ne_W0lf
//===== Current Version: =====================================
//= 6.8
//===== Description: =========================================
//= These functions handle save, storage, cart rental, teleport,
//= and Free Teleport/Warp/Rent Cart options for all Kafra NPCs.
//=
//= Kafra's will need a lot of work. The Welcome Message argument
//= may become obsolete, as most kafras have a slightly differing
//= Welcome message.
//===== Additional Comments: =================================
//= 1.1 Now using functions v2.1 Added Cart Rent for Classes: Whitesmith, Professor.
//=     Replaced checkoption(x) into checkcart(0) [Lupus] v2.1b Added Fix Kafra Pass Func [Kobra_k88]
//= 2.2 Final fix of the Kafra Pass Exploit! [Lupus] a -Izlude[4] fix
//= 2.2a Minor changes to function calls.  Using agruments. Added Guild options. [kobra_k88]
//= 2.2b This version uses arrays for the teleport option. Rearranged next statements to make menu transitions smoother. [kobra_k88]
//= 2.3 Removed SAVE from Niflheim. [Lupus]
//= 2.3 removed "fix" by HawkMoon RTFM and check supernovice.txt . There's a SPECIAL Kafra which gives CARTS to SN for a special proce. [Lupus]
//= 2.4 Added Baby Class Support (Baby Novice check) Removed annoying storage feature where u had to close dialog window to be able to use your storage [Lupus]
//= 2.5 Added Louyang official Kafra, fixes some Kafras, not letting you to Save your position [Lupus]
//= 2.6 Reverted Dungeons Kafras (they should offer only Storage). Added temp Ayothaya Kafra
//= 2.7 Added correct Ayothaya, Louyang & Amatsu Kafras. [Lupus]
//= 2.8 Fixed Amatsu Storage problems [Lupus] 2.9 Fixed spelling mistakes. [Nexon]
//= 3.0 Added special "not working teleport menu" for Einbroch Kafras [Lupus]
//= 3.1 Removed callfunc Is_####_Class in favor of baseClass [Silentdragon]
//= 3.2 Fixed an exploit [Lupus]
//= 4.0 Added Kafra storage password protection. [Lupus]
//=     to block Kafra Password, read comments at 350 line
//= 5.0 Fixed the close2;....close; end; lines. Who let them slip away? =/ [erKURITA]
//=     Also, the kafra upon warp was giving back the zeny. Removed. [erKURITA]
//= 5.1 Optimized a little, added no tele/save arg's [Evera]
//= 5.1a Temporary? Added F_ClearGarbage to clear unused/outdated variables [Lupus]
//= 5.2 By default commented out custom Guilds Kafra's "Guild Storage". [Lupus]
//= 5.3 uncommented Guild Storage. Confirmed kRO feature. [Lupus]
//= 5.4 added -Guide option (Kafra shows you nearest Guide) Work in progress.
//=     Need all coords for all guides.. and somehow pass their coords to kafra.
//=     Removed universal Kafra Pass, added 3 new Kafra Tickets [Lupus]
//= 5.4b temporary moved "-Guide" from the 1st menu punct [Lupus]
//= 5.5 Added proper Niflheim welcome message.	[L0ne_W0lf]
//=     Cleaned up the menus a bit. Got rid of the proceeding "-" prefix.
//= 5.5b Missed a preceeding hyphen, which was screwing up teleporting. [L0ne_W0lf]
//= 5.6 Further dialog updates, added  dynamic costs for cart and storage use. [L0ne_W0lf]
//=     Updated some functions to handle Guild Kafras the way they should.
//= 5.6a Corrected a few wrong names in the teleport function. [L0ne_W0lf]
//= 5.7 Correced end message no longer displaying, and the duplicate names [L0ne_W0lf]
//=     Thanks to Barron-Monster for pointing out the issues.
//= 5.8 Fixed another double name being shown when "saving" [L0ne_W0lf]
//= 5.9 Fixed the Kafra Welcome message for guilds. Thanks Barron-Monster. [L0ne_W0lf]
//= 6.0 Closed Kafra Password exploit in Cool Event Corp. Storages until we got a client/packet based password support.
//=     Added 2 args into F_SetKafCode to fit it in Cool Evnt Co. NPC [Lupus]
//= 6.1 Added menu for Turbo Track Kafra Staff. [L0ne_W0lf]
//= 6.2 Updated/Fixed warp cords. [Kisuka]
//= 6.3 #kafra_code is now stored as is. [brianluau]
//= 6.4 Removed unofficial Guide function. [Daegaladh]
//= 6.5 Optimized. [Joseph]
//= 6.6 Added Warp Points / View Points Function. [Joseph]
//= 6.7 Added Rune Knight Kafra. [Euphy]
//= 6.8 Improved compatibility with Zonda Staff NPCs. Modernized syntax. [Haru]
//============================================================

//=== Main Function ========================================================
//=   arg(0): Used to determine which welcome message to show.
//=   arg(1): Used to determine which menu to display.
//=   arg(2): Used to determine if the info menu is shown in F_KafInfo.
//=   arg(3): Cost to use Storage
//=   arg(4): Cost to Rent a Pushcart
//==========================================================================
function	script	F_Kafra	{
	callfunc "F_ClearGarbage"; // Clear outdated, unused variables
	// Display Kafra Welcome Message
	switch (getarg(0)) {
		default:
		case 0:
			// Default message (obsolete)
			mes "[Kafra Employee]";
			mes "Welcome to the";
			mes "Kafra Corporation.";
			mes "The Kafra services";
			mes "are always on your side.";
			mes "How may I assist you?";
			break;
		case 1:
			// Niflheim specific message
			mes "[Kafra Employee]";
			mes "^666666W-weeeelc-c-come";
			mes "to th-the K-kaaafrrrra";
			mes "C-coorpoor-r-ratioooonn...^000000";
			break;
		case 2:
			// Guild Castle Kafra message
			@GID = getcharid(2);
			mes "[Kafra Employee]";
			mes "Welcome. ^ff0000" + getguildname(@GID) + "^000000 Member.";
			mes "The Kafra Coporation will stay with you wherever you go.";
			break;
		case 3:
			// Amatsu specific message (obsolete)
			mes "[Kafra Employee]";
			mes "So, have you come from a faraway land to study our culture, or are you just sightseeing?";
			mes "In either case, why not stay awhile?";
			mes "The air is eternally heavy with the";
			mes "scent of pleasant wildflowers.";
			break;
		case 4:
			// Louyang and Ayothaya specific message (obsolete)
			mes "[Kafra Employee]";
			mes "With our many Kafra";
			mes "service locations, you're never";
			mes "far from home.";
			break;
		case 5:
			// NPC has it's own welcome message. (Display nothing)
			break;
	}
	next;
	while (true) {
		deletearray @K_Menu0$;
		if (getarg(0) == 2) {
			// Guild Kafra Menu override (free Teleport, free Storage, Free Cart)
			setarray @K_Menu0$[0],"Use Storage","Use Guild Storage","Rent a Pushcart","Use Teleport Service","Cancel";
		} else {
			switch (getarg(1)) {
				// Save and Storage only
				case 1:	setarray @K_Menu0$[0],"Save","Use Storage","Jobchange","Reset Service","Cancel"; break;
				// Storage only
				case 2:	setarray @K_Menu0$[0],"Use Storage","Jobchange","Reset Service","Cancel"; break;
				// No Teleport (Common)
				case 3: setarray @K_Menu0$[0],"Save","Use Storage","Rent a Pushcart","Check Other Information","Jobchange","Reset Service","Cancel"; break;
				// Case 4 is Einbroch no tele message.
				// No save, or teleport. (Common)
				case 5:	setarray @K_Menu0$[0],"Use Storage","Rent a Pushcart","Check Other Information","Jobchange","Reset Service","Cancel"; break;
				// Storage and Check Other Information only.
				case 6:	setarray @K_Menu0$[0],"Use Storage","Check Other Information","Jobchange","Reset Service","Cancel"; break;
				// Save, Storage, and Pushcart only (Kafra Warehouse)
				case 7:	setarray @K_Menu0$[0],"Save","Use Storage","Rent a Pushcart","Jobchange","Reset Service","Cancel"; break;
				// Save, Storage, Other Check information. (Turbo track)
				case 8: setarray @K_Menu0$[0],"Save","Use Storage","Check Other Information","Jobchange","Reset Service","Cancel"; break;
				// No Save (Rune Knight)
				case 9: setarray @K_Menu0$[0],"Use Storage","Rent a Pushcart","Use Teleport Service","Check Other Information","Jobchange","Reset Service","Cancel"; break;
				// Storage, Save, and Pushcart (Dewata, reorder of case 7)
				case 10: setarray @K_Menu0$[0],"Use Storage","Save","Rent a Pushcart","Jobchange","Reset Service","Cancel"; break;
				// Default message (obsolete)
				default: setarray @K_Menu0$[0],"Save","Use Storage","Use Teleport Service","Rent a Pushcart","Check Other Information","Jobchange","Reset Service","Cancel"; break;
			}
		}
		.@menu$ = "";
		for (.@i = 0; .@i < getarraysize(@K_Menu0$); ++.@i)
			.@menu$ += @K_Menu0$[.@i] + ":";
		.@j = select(.@menu$) - 1;
		if (@K_Menu0$[.@j] == "Save") {
			return;
		} else if (@K_Menu0$[.@j] == "Use Storage") {
			// Do not charge for Guild Storage
			if(getarg(0) == 2)
				callfunc "F_KafStor",2,0,0,"[Kafra Employee]";
			else
				callfunc "F_KafStor",0,getarg(3),getarg(0),"[Kafra Employee]";
			next;
		} else if (@K_Menu0$[.@j] == "Use Teleport Service") {
			// Display Einbroch "No Teleport Service" notice.
			if (getarg(1) != 4) {
				callfunc "F_KafTele",getarg(0),"[Kafra Employee]";
			} else {
				mes "[Kafra Employee]";
				mes "Because of the ^FF0000Limited";
				mes "Transport Agreement^000000, the";
				mes "Kafra Corporation cannot";
				mes "provide Teleport Services";
				mes "in the Schwaltzvalt Republic.";
				next;
				mes "[Kafra Employee]";
				mes "We ask that you please";
				mes "use the Airship Service";
				mes "instead. Thank you for your";
				mes "understanding and cooperation.";
			}
			next;
		} else if (@K_Menu0$[.@j] == "Rent a Pushcart") {
			if(callfunc("F_KafCart",getarg(0),getarg(4),"[Kafra Employee]") == 1)
				next;
		} else if (@K_Menu0$[.@j] == "Check Other Information") {
			callfunc "F_KafInfo",getarg(2);
			next;
		} else if (@K_Menu0$[.@j] == "Cancel"){
			callfunc "F_KafEnd",getarg(0),0;
			end;
		} else if (@K_Menu0$[.@j] == "Use Guild Storage") {
			callfunc "F_KafStor",1,0,0,"[Kafra Employee]";
			next;
		} else if (@K_Menu0$[.@j] == "Jobchange") {
			callfunc "F_KafJobchange",1,0,0,"[Kafra Employee]";
			next;
		} else if (@K_Menu0$[.@j] == "Reset Service") {
			callfunc "F_KafReset",1,0,0,"[Kafra Employee]";
			next;
		}
	}
}

//===================================================
// Storage Function
//=   arg(0): Specifies the type of storage that has been requested:
//            0 = Regular storage
//            1 = Guild storage
//            2 = Regular storage, in a castle (free of charge)
//=   arg(1): Cost to use storage.
//=   arg(2): The type of NPC this is being called from. Notable values:
//            0,2-5 = Regular Kafra
//            1 = Niflheim Kafra (special messages)
//            6 = Zonda/Cool Event Staff (no RESRVPTS)
//=   arg(3): NPC title to display.
//===================================================
function	script	F_KafStor	{
	// Unable to access Guild Storage (Busy)
	if (getarg(0) == 1) {
		if (guildopenstorage()) {
			mes getarg(3);
			mes "I'm sorry but another guild member is using the guild storage";
			mes "right now.  Please wait until that person is finished.";
			close2;
			cutin "", 255;
			end;
		}
		cutin "", 255;
		close;
	}
	// Unable to access Normal Storage (Insufficient Basic Skills)
	if (basicskillcheck() && getskilllv(NV_BASIC) < 6) {
		mes getarg(3);
		// Niflheim Specific Message
		if (getarg(2) == 1) {
			mes "^666666S-s-ssoooorry,";
			mes "y-you're a-a-aaaa";
			mes "Nooviiice... N-neeeds";
			mes "B-basic sssskill l-level 6...^000000";
			return;
		}
		mes "I'm sorry, but you";
		mes "need the Novice's";
		mes "Basic Skill Level 6 to";
		mes "use the Storage Service.";
		return;
	}
	// Accessing Normal Storage (Skipped if accessing Storage from Guild castle)
	if (getarg(0) != 2) {
		// Consume "Free Ticket for Kafra Storage" if available.
		if (countitem(Cargo_Free_Ticket)) {
			delitem Cargo_Free_Ticket, 1;
		} else {
			if (Zeny < getarg(1)) {
				mes getarg(3);
				// Niflheim Specific Message
				if (getarg(2) == 1) {
					percentheal -50,-50;
					mes "^666666Zeeeeeny...";
					mes "M-more z-zeny...!";
					mes "N-neeed 150... zeny...";
					mes "Ergh! T-taking bl-blood~!^000000";
					return;
				}
				// Standard Message
				mes "I'm sorry, but you don't";
				mes "have enough zeny to use";
				mes "the Storage Service. Our";
				mes "Storage access fee is "+getarg(1)+" zeny.";
				return;
			}
			Zeny -= getarg(1);
			if (getarg(2) != 6)
				RESRVPTS += getarg(1) / 5;
		}
	}

	// Surpress the "End" message if in guild castle.
	if (getarg(0) != 2) {
		if (getarg(2) == 1) {
			// Niflheim specific Message
			percentheal 0,-10;
			mes getarg(3);
			for (.@i = 0; .@i < 5; ++.@i)
				mes "^666666Thank you.. for... using...^000000";
		} else if (getarg(2) == 6) {
			// Zonda
			mes getarg(3);
			mes "Let me open your personal";
			mes "storage for you right away.";
			mes "Thanks for supporting Cool";
			mes "Event Corp. by using our";
			mes "services. Have a good day~";
		} else {
			// Normal message
			mes getarg(3);
			mes "Here, let me open";
			mes "your Storage for you.";
			mes "Thank you for using";
			mes "the Kafra Service.";
		}
	}
	callfunc("F_CheckKafCode"); //check your storage password, if set
	close2;
	openstorage;
	cutin "", 255;
	end;
}

//===================================================
// Teleport Function
//=   arg(2): The type of NPC this is being called from. Notable values:
//            2 = Guild Castle Kafra (don't consume tickets)
//            6 = Zonda/Cool Event Staff (no RESRVPTS)
//=   arg(1): NPC title to display.
//===================================================
function	script	F_KafTele	{
	mes getarg(1);
	mes "Please choose";
	mes "your destination.";
	next;
	.@menu$ = "";
	for (.@i = 0; .@i <= 6; ++.@i)
		.@menu$ += @wrpC$[.@i] + ":";
	.@j = select(.@menu$) - 1;
	if (@wrpC$[.@j] == "Cancel")
		return;
	// Consume "Free Ticket for Kafra Transportation" if available.
	// Do not consume if in Guild castle
	if (countitem(Warp_Free_Ticket) > 0 && getarg(0) != 2) {
		delitem Warp_Free_Ticket, 1;
	} else {
		if (Zeny < @wrpP[.@j]) {
			mes getarg(1);
			mes "I'm sorry, but you don't have";
			mes "enough zeny for the Teleport";
			mes "Service. The fee to teleport";
			mes "to "+@wrpD$[.@j]+" is "+@wrpP[.@j]+" zeny.";
			close2;
			cutin "", 255;
			end;
		}
		Zeny -= @wrpP[.@j];
		if (getarg(0) != 6)
			RESRVPTS += @wrpP[.@j] / 16;
	}
	cutin "", 255;
	if (@wrpD$[.@j] == "Al De Baran") warp "aldebaran",168,112;
	else if (@wrpD$[.@j] == "Alberta") warp "alberta", 117, 56;
	else if (@wrpD$[.@j] == "Comodo") warp "comodo", 209, 143;
	else if (@wrpD$[.@j] == "Comodo Pharos Beacon") warp "cmd_fild07", 127, 134;
	else if (@wrpD$[.@j] == "Geffen") warp "geffen", 120, 39;
	else if (@wrpD$[.@j] == "Izlude") { if (checkre(0)) warp "izlude", 128, 98; else warp "izlude", 91, 105; }
	else if (@wrpD$[.@j] == "Juno") warp "yuno", 158, 125;
	else if (@wrpD$[.@j] == "Mjolnir Dead Pit") warp "mjolnir_02", 99, 351;
	else if (@wrpD$[.@j] == "Morroc") warp "morocc", 156, 46;
	else if (@wrpD$[.@j] == "Orc Dungeon") warp "gef_fild10", 52, 326;
	else if (@wrpD$[.@j] == "Payon") warp "payon", 161, 58;
	else if (@wrpD$[.@j] == "Prontera") warp "prontera", 116, 72;
	else if (@wrpD$[.@j] == "Umbala") warp "umbala", 100, 154;
	else if (@wrpD$[.@j] == "Veins") warp "veins",205,101;
	else if (@wrpD$[.@j] == "Rachel") warp "rachel",115,125;
	end;
}


//===================================================
// Cart Function
//=   arg(0): The type of NPC this is being called from. Notable values:
//            0,1,3-5 = Regular Kafra
//            2 = Guild Castle Kafra (don't consume tickets)
//            6 = Zonda/Cool Event Staff (no RESRVPTS)
//=   arg(1): Cost to rent a cart.
//=   arg(2): NPC title to display.
//===================================================
function	script	F_KafCart	{
	// Ensure that the class wanting to rent a pushcart is a merchant
	if (BaseClass != Job_Merchant) {
		mes getarg(2);
		mes "I'm sorry, but the";
		mes "Pushcart rental service";
		mes "is only available to Merchants,";
		mes "Blacksmiths, Master Smiths,";
		mes "Alchemists and Biochemists.";
		return 1;
	}
	if (getskilllv(MC_PUSHCART) == 0) {
		mes getarg(2);
		mes "You can only rent a cart after";
		mes "learning the Pushcart Skill.";
		return 1;
	}
	// Make sure the invoking character does not have a cart already
	if (checkcart() == 1) {
		mes getarg(2);
		mes "You already have";
		mes "a Pushcart equipped.";
		mes "Unfortunately, we can't";
		mes "rent more than one to";
		mes "each customer at a time.";
		return 1;
	}
	// Consume "Free Ticket for the Cart Service" if available.
	// Do not consume if in Guild castle.
	if (countitem(Cart_Free_Ticket) > 0 && getarg(0) != 2) {
		delitem Cart_Free_Ticket, 1;
	} else {
		mes getarg(2);
		mes "The Pushcart rental";
		mes "fee is "+getarg(1)+" zeny. Would";
		mes "you like to rent a Pushcart?";
		next;
		if (select("Rent a Pushcart.:Cancel") == 2)
			return 0;
		if (Zeny < getarg(1)) {
			mes getarg(2);
			mes "I'm sorry, but you";
			mes "don't have enough";
			mes "zeny to pay the Pushcart";
			mes "rental fee of "+getarg(1)+" zeny.";
			return 1;
		}
		Zeny -= getarg(1);
		if (getarg(0) != 6)
			RESRVPTS += 48;
	}
	setcart;
	return 1;
}

//===================================================
// Special Reserve Points Function
//===================================================
function	script	F_KafInfo	{
	// Uncomment next line to block Kafra Storage Protection
	//.@block = 1;
	setarray .@m$, "Check Special Reserve Points.","Storage Password Service","Kafra Employee Locations","Cancel";
	if (getarg(0) == 2) deletearray .@m$[1],2; // Port Malaya, Rune Knight: remove Storage Password and Kafra Employee Locations
	else if (.@block) deletearray .@m$[1],1; // Remove Storage Password
	while (true) {
		.@j = select(implode(.@m$,":")) - 1;
		if (.@m$[.@j] == "Check Special Reserve Points.") {
			mes "[Kafra Employee]";
			mes "Let's see...";
			mes strcharinfo(0) + "...";
			mes "Ah, you have a total of";
			mes RESRVPTS+ " Special Reserve Points.";
			next;
			mes "[Kafra Employee]";
			mes "You can exchange your";
			mes "Special Reserve Points for";
			mes "rewards at the Kafra Main Office in Al De Baran. Please use our";
			mes "convenient services to see the benefits of our rewards program.";
			next;
			if(getarg(0) == 1)
				return;
		} else if (.@m$[.@j] == "Kafra Employee Locations") {
			for (.@i = 0; .@i <= 3; ++.@i)
				viewpoint 1,@viewpX[.@i],@viewpY[.@i],(.@i+1),0xFF00FF;
			next;
			for (.@i = 0; .@i <= 3; ++.@i)
				viewpoint 2,@viewpX[.@i],@viewpY[.@i],(.@i+1),0xFF00FF;
		} else if (.@m$[.@j] == "Storage Password Service") {
			callfunc("F_SetKafCode","[Kafra Employee]","Kafra Services");
		} else {
			return;
		}
	}
}

// === End Function ==================================================
//  arg(0): used to determine what message to display.
//  arg(1): used to determine if save message is displayed.
//  arg(2): used to display the name of the area you're saving in.
//===================================================================
function	script	F_KafEnd	{
	mes "[Kafra Employee]";
	if (getarg(1) == 1) {
		// Save
		mes "Your Respawn Point";
		mes "has been saved here";
		mes getarg(2)+".";
		mes "Thank you for using";
		mes "the Kafra Services.";
	} else if (getarg(0) == 0 || getarg(0) == 5) {
		// Generic End
		mes "We, here at Kafra Corporation,";
		mes "are always endeavoring to provide you with the best services. We hope that we meet your adventuring needs and standards of excellence.";
	} else if (getarg(0) == 1) {
		// Niflheim End
		percentheal 0,-25;
		mes "^666666Kaffffra n-never";
		mes "diiiiiiiiiiiiiies. On...";
		mes "On y-yooour siiiiide~^000000";
	}
	close2;
	cutin "", 255;
	end;
}

//===================================================
// Check Storage Password Function
//===================================================
function	script	F_CheckKafCode	{
	if (!#kafra_code)
		return;
	mes "Enter your storage password:";
	@code_ = 0;
	input @code_;
	if (@code_ != #kafra_code) {
		dispbottom "Wrong storage password.";
		close2;
		cutin "",255;
		end;
	}
	@kafcode_try = 0;
	@code_ = 0;
	return;
}

// === Set / Change / Clear Storage Password Function ===
// getarg(0): NPC Name
// getarg(1): Company Name
//=======================================================
function	script	F_SetKafCode	{
	mes getarg(0);
	if (#kafra_code) {
		mes "Your storage is protected with a password. What would you do now?";
		next;
		switch (select("Change old password -> 5000z:Remove storage password -> 1000z:Cancel")) {
			case 1:
				mes getarg(0);
				mes "At first, please enter your ^0000FFold password^000000.";
				@code = callfunc("F_EntKafCode");
				if (!@code || @code != #kafra_code) {
					mes "Wrong password. You can't set a new password.";
					emotion e_hmm;
					break;
				}
				next;
				callsub S_SET,getarg(0),getarg(1);
				break;
			case 2:
				mes getarg(0);
				mes "Please, enter your password before its removal.";
				@code = callfunc("F_EntKafCode");
				if (!@code) {
					mes "The password hasn't been removed.";
					emotion e_hmm;
					break;
				}
				next;
				mes getarg(0);
				if (Zeny < 1000) {
					mes "You don't have enough zeny.";
					emotion e_cash;
					break;
				}
				Zeny -= 1000;
				if (@code == #kafra_code) {
					#kafra_code = 0;
					mes "You've successfully cleared your storage password.";
					mes "Thank you for using "+getarg(1)+".";
					emotion e_thx;
				} else {
					mes "Wrong password. We won't return your 1000z.";
					mes "Please, next time enter correct password.";
					emotion e_sry;
				}
				break;
			case 3:
				break;
		}
	} else {
		mes getarg(1)+" proudly presents you a new service:";
		mes "Additional storage protection with a password.";
		next;
		switch (select("Set new password -> 5000z:Cancel")) {
			case 1: callsub S_SET,getarg(0),getarg(1); break;
			case 2: break;
		}
	}
	close2;
	cutin "",255;
	end;

S_SET:
	mes getarg(0);
	mes "Now enter your ^FF0000new password^000000 to protect your storage from thieves.";
	@code = callfunc("F_EntKafCode");
	if (!@code) {
		mes "The password hasn't been changed.";
		emotion e_hmm;
		return;
	}
	next;
	mes getarg(0);
	if (Zeny < 5000) {
		mes "You don't have enough zeny.";
		emotion e_cash;
		return;
	}
	Zeny -= 5000;
	#kafra_code = @code;
	mes "You've protected your storage with a secret password.";
	mes "Thank you for using "+getarg(1)+".";
	emotion e_thx;
	return;
}

//===================================================
// Basic Password Validation Function
//===================================================
function	script	F_EntKafCode	{
	mes "Enter a number 1000~10000000:";
	@code_ = 0;
	++@kafcode_try;
	if (@kafcode_try > 10) {
		@kafcode_try = 0;
		logmes "Hack: Tried to fit storage password.";
	}
	if (input(@code_) == 1) {
		mes "You can't use such big password.";
		return 0;
	}
	if (@code_ < 1000) {
		mes "You shouldn't use such short password.";
		return 0;
	}
	return @code_;
}

//===================================================
// Warp Points / View Points Function
//===================================================
function	script	F_KafSet	{
	deletearray @wrpC$;
	deletearray @wrpD$;
	deletearray @wrpP$;
	deletearray @viewpX;
	deletearray @viewpY;
	if (strnpcinfo(4) == "prontera") {
		setarray @wrpD$, "Izlude", "Geffen", "Payon", "Morroc", "Orc Dungeon", "Alberta";
		setarray @wrpP, 600, 1200, 1200, 1200, 1200, 1800;
		setarray @viewpX, 151, 29, 282, 152;
		setarray @viewpY, 29, 207, 200, 326;
	} else if (strnpcinfo(4) == "alberta") {
		setarray @wrpP, 1200, 1800, 1800;
		setarray @wrpD$, "Payon", "Morroc", "Prontera";
		setarray @viewpX, 28, 113, 0, 0;
		setarray @viewpY, 229, 60, 0, 0;
	} else if (strnpcinfo(4) == "aldebaran") {
		setarray @wrpP, 1200, 1200, 1800, 1700;
		setarray @wrpD$, "Geffen", "Juno" , "Izlude", "Mjolnir Dead Pit";
	} else if (strnpcinfo(4) == "comodo" ) {
		setarray @wrpD$, "Morroc", "Comodo Pharos Beacon", "Umbala";
		setarray @wrpP, 1800, 1200, 1800;
	} else if (strnpcinfo(4) == "cmd_fild07") {
		setarray @wrpD$, "Comodo", "Morroc";
		setarray @wrpP, 1200, 1200;
	} else if (strnpcinfo(4) == "geffen") {
		setarray @wrpD$, "Prontera", "Al De Baran", "Orc Dungeon", "Mjolnir Dead Pit";
		setarray @wrpP, 1200, 1200, 1200, 1700;
		setarray @viewpX, 120, 203;
		setarray @viewpY, 62, 123;
	} else if (strnpcinfo(4) == "izlude") {
		setarray @wrpD$, "Geffen", "Payon", "Morroc", "Al De Baran";
		setarray @wrpP, 1200, 1200, 1200, 1800;
	} else if (strnpcinfo(4) == "morocc") {
		setarray @wrpD$, "Prontera", "Payon", "Alberta", "Comodo", "Comodo Pharos Beacon";
		setarray @wrpP, 1200, 1200, 1800, 1800, 1200;
		setarray @viewpX, 156, 163, 28, 292;
		setarray @viewpY, 97, 260, 167, 211;
	} else if (strnpcinfo(4) == "umbala") {
		setarray @wrpD$, "Comodo";
		setarray @wrpP, 1800;
	} else if (strnpcinfo(4) == "payon") {
		setarray @wrpD$, "Prontera", "Alberta", "Morroc";
		setarray @wrpP, 1200, 1200, 1200;
	} else if (strnpcinfo(4) == "yuno") {
		setarray @wrpD$, "Al De Baran";
		setarray @wrpP, 1200;
		setarray @viewpX, 328, 278, 153, 0;
		setarray @viewpY, 108, 221, 187, 0;
	} else if (strnpcinfo(4) == "job3_rune01") {
		setarray @wrpD$, "Izlude", "Geffen", "Payon", "Morroc", "Alberta";
		setarray @wrpP, 600, 1200, 1200, 1200, 1800;
	} else if (strnpcinfo(4) == "rachel") {
		setarray @wrpD$, "Veins";
		setarray @wrpP, 2200;
	} else if (strnpcinfo(4) == "veins") {
		setarray @wrpD$, "Rachel";
		setarray @wrpP, 2200;
	}
	for (.@i = 0; .@i < getarraysize(@wrpD$); ++.@i)
		@wrpC$[.@i] = @wrpD$[.@i]+" -> "+@wrpP[.@i];
	@wrpC$[getarraysize(@wrpC$)] = "Cancel";
	return;
}

//===================================================
// Jobchanging Function
//===================================================
function	script	F_KafJobchange	{

	set .rebirth_blevel,99;			// Minimum base level to reborn OR change to third class
	set .rebirth_jlevel,50;			// Minimum base job level to reborn OR change to third class		
	set .jobchange_first,10;		// Minimum job level to turn into 1st class
	set .jobchange_second,50;		// Minimum job level to turn into 2nd class
	set .third_classes,0;			// Enable third classes? (1: yes / 0: no)
	set .supernovice_level,45;		// Minimum base level to turn into Super Novice
	set .linear_jobchange,1;		// Enforce linear class changes? (1: yes / 0: no)
	set .skill_point_check,1;		// Force player to use up all skill points? (1: yes / 0: no)
	set .platinum,1;				// Get platinum skills automatically? (1: yes / 0: no)
	
	
	cutin "", 255;
	function Job_Menu; function A_An;

	mes "[Kafra Employee]";
	if (Class > Job_Soul_Linker) {
		mes "No more jobs are available.";
		close;
	}
	if (checkfalcon() || checkcart() || checkmount() || hascashmount()) {
		mes "Please remove your "+((checkfalcon())?"falcon":"")+((checkcart())?"cart":"")+((checkmount() || hascashmount())?"mount":"")
		    +" before proceeding.";
		close;
	}
	if (.skill_point_check && SkillPoint > 0) {
		mes "Please use all your skill points before proceeding.";
		close;
	}

	.@eac = eaclass();
	.@base = .third_classes ? roclass(.@eac&EAJ_UPPERMASK) : Class;
	if (.@base >= Job_Knight && .@base <= Job_Crusader2) {
		if (BaseLevel < .rebirth_blevel || JobLevel < .rebirth_jlevel) {
			.@blvl = .rebirth_blevel - BaseLevel;
			.@jlvl = .rebirth_jlevel - JobLevel;
			mes "You need "
			    + (BaseLevel < .rebirth_blevel ? ((.rebirth_blevel - BaseLevel) +" more base levels "+ (JobLevel < .rebirth_jlevel ? "and " : "")) : "")
			    + (JobLevel < .rebirth_jlevel ? (.rebirth_jlevel - JobLevel) +" more job levels " : "")
			    + "to continue.";
			close;
		}
		if (Class > Job_Crusader2) {
			mes "Switch to third class?";
			next;
			Job_Menu(roclass(.@eac|EAJL_THIRD));
			close;
		}
		while (true) {
			mes "Select an option.";
			next;
			.@choice = select(" ~ ^0055FFRebirth^000000:"+(.third_classes ? " ~ ^FF0000Third Class^000000" : "")+": ~ ^777777Cancel^000000");
			if (.@choice == 3)
				close;
			mes "[Kafra Employee]";
			mes "Are you sure?";
			next;
			if (.@choice == 1)
				Job_Menu(Job_Novice_High);
			else
				Job_Menu(roclass(.@eac|EAJL_THIRD));
			mes "[Kafra Employee]";
		}
	}
	.@job1 = roclass(.@eac|EAJL_2_1);
	.@job2 = roclass(.@eac|EAJL_2_2);
	if ((.@eac&EAJ_UPPERMASK) == EAJ_SUPER_NOVICE) {
		.@newclass = roclass(.@eac|EAJL_THIRD);
		.@required_jlevel = 99;
	} else if (Class == Job_Ninja) {
		.@newclass = .@job1;
		.@required_jlevel = 70;
	}
	if (.@newclass && .third_classes) {
		if (BaseLevel < .rebirth_blevel || JobLevel < .@required_jlevel) {
			mes "You need "
			    + (BaseLevel < .rebirth_blevel ? ((.rebirth_blevel - BaseLevel) +" more base levels "+ (JobLevel < .@required_jlevel ? "and " : "")) : "")
			    + (JobLevel < .@required_jlevel ? (.@required_jlevel - JobLevel) +" more job levels " : "")
			    + "to continue.";
			close;
		}
		mes "Switch to "+jobname(.@newclass)+"?";
		next;
		Job_Menu(.@newclass);
		close;
	}
	if (.@eac&EAJL_2)
		if (.@eac&(EAJL_UPPER|EAJL_BABY) || roclass(.@eac|EAJL_UPPER) == -1) {
			mes "No more jobs are available.";
			close;
		}
	if ((.@eac&EAJ_BASEMASK) == EAJ_NOVICE) {
		if (JobLevel < .jobchange_first) {
			mes "A job level of "+.jobchange_first+" is required to change into the 1st Class.";
		} else if (Class == Job_Novice_High && .linear_jobchange && lastJob) {
			mes "Switch classes now?";
			next;
			Job_Menu(roclass((eaclass(lastJob)&EAJ_BASEMASK)|EAJL_UPPER));
		} else if (Class == Job_Novice) {
			Job_Menu(Job_Swordman, Job_Mage, Job_Archer, Job_Acolyte, Job_Merchant, Job_Thief);
		} else if (Class == Job_Novice_High) {
			Job_Menu(Job_Swordman_High, Job_Mage_High, Job_Archer_High, Job_Acolyte_High, Job_Merchant_High, Job_Thief_High);
		} else if (Class == Job_Baby) {
			Job_Menu(Job_Baby_Swordman, Job_Baby_Mage, Job_Baby_Archer, Job_Baby_Acolyte, Job_Baby_Merchant, Job_Baby_Thief,
			         Job_Super_Baby);
		} else {
			mes "An error has occurred.";
		}
		close;
	}
	if (roclass(.@eac|EAJL_2_1) == -1 || roclass(.@eac|EAJL_2_2) == -1) {
		mes "No more jobs are available.";
	} else if (!(.@eac&EAJL_2) && JobLevel < .jobchange_second) {
		mes "A job level of "+.jobchange_second+" is required to change into the 2nd Class.";
	} else if (.linear_jobchange && lastJob && (.@eac&EAJL_UPPER)) {
		mes "Switch classes now?";
		next;
		Job_Menu(lastJob+Job_Novice_High);
	} else {
		Job_Menu(.@job1, .@job2);
	}
	close;

function Job_Menu {
	while (true) {
		if (getargcount() > 1) {
			mes "Select a job.";
			.@menu$ = "";
			for (.@i = 0; .@i < getargcount(); ++.@i)
				.@menu$ += " ~ "+jobname(getarg(.@i))+":";
			.@menu$ += " ~ ^777777Cancel^000000";
			next;
			.@newjob = getarg(select(.@menu$)-1, 0);
			if (!.@newjob) close;
			if ((.@newjob == Job_SuperNovice || .@newjob == Job_Super_Baby) && BaseLevel < .supernovice_level) {
				mes "[Kafra Employee]";
				mes "A base level of "+.supernovice_level+" is required to turn into a "+jobname(.@newjob)+".";
				close;
			}
			mes "[Kafra Employee]";
			mes "Are you sure?";
			next;
		} else {
			.@newjob = getarg(0);
		}
		if (select(" ~ Change into ^0055FF"+jobname(.@newjob)+"^000000 class: ~ ^777777"+(getargcount() > 1 ? "Go back" : "Cancel")+"^000000") == 1) {
			mes "[Kafra Employee]";
			mes "You are now "+A_An(jobname(.@newjob))+"!";
			if (.@newjob == Job_Novice_High && .linear_jobchange)
				lastJob = Class; // Note: This is incompatible with the Valkyrie rebirth script.
			jobchange .@newjob;
			if (.@newjob == Job_Novice_High)
				resetlvl(1);
			if (.@newjob == Job_Baby) {
				resetlvl(4);
				SkillPoint = 0;
			}
			specialeffect2 EF_ANGEL2;
			specialeffect2 EF_ELECTRIC;
			if (.platinum)
				callsub Get_Platinum;
			close;
		}
		if (getargcount() == 1)
			return;
		mes "[Kafra Employee]";
	}
	end;
}

function A_An {
	setarray .@vowels$, "a", "e", "i", "o", "u";
	.@firstletter$ = strtolower(charat(getarg(0), 0));
	for (.@i = 0; .@i < getarraysize(.@vowels); ++.@i) {
		if (.@vowels$[.@i] == .@firstletter$)
			return "an "+getarg(0);
	}
	return "a "+getarg(0);
}

Get_Platinum:
	skill NV_FIRSTAID, 1, 0;
	if (BaseClass == Job_Novice) {
		if (Class != Job_SuperNovice)
			skill NV_TRICKDEAD, 1, 0;
	} else if (BaseClass == Job_Swordman) {
		skill SM_MOVINGRECOVERY, 1, 0;
		skill SM_FATALBLOW, 1, 0;
		skill SM_AUTOBERSERK, 1, 0;
		getitem 1407,1;
	} else if (BaseClass == Job_Mage) {
		skill MG_ENERGYCOAT, 1, 0;
		getitem 1601,1;
	} else if (BaseClass == Job_Archer) {
		skill AC_MAKINGARROW, 1, 0;
		skill AC_CHARGEARROW, 1, 0;
		getitem 1704,1;
		getitem 1750,300;
	} else if (BaseClass == Job_Acolyte) {
		skill AL_HOLYLIGHT, 1, 0;
		getitem 1601,1;
		getitem 1519,1;
	} else if (BaseClass == Job_Merchant) {
		skill MC_CARTREVOLUTION, 1, 0;
		skill MC_CHANGECART, 1, 0;
		skill MC_LOUD, 1, 0;
		getitem 1351,1;
	} else if (BaseClass == Job_Thief) {
		skill TF_SPRINKLESAND, 1, 0;
		skill TF_BACKSLIDING, 1, 0;
		skill TF_PICKSTONE, 1, 0;
		skill TF_THROWSTONE, 1, 0;
		getitem 1207,1;
	}

	if (BaseJob == Job_Knight) {
		skill KN_CHARGEATK, 1, 0;
		getitem 1460,1;
	} else if (BaseJob == Job_Priest) {
		skill PR_REDEMPTIO, 1, 0;
		getitem 1607,1;
	} else if (BaseJob == Job_Wizard) {
		skill WZ_SIGHTBLASTER, 1, 0;
		getitem 1607,1;
	} else if (BaseJob == Job_Blacksmith) {
		skill BS_UNFAIRLYTRICK, 1, 0;
		skill BS_GREED, 1, 0;
		getitem 1360,1;
	} else if (BaseJob == Job_Hunter) {
		skill HT_PHANTASMIC, 1, 0;
		getitem 1714,1;
	} else if (BaseJob == Job_Assassin) {
		skill AS_SONICACCEL, 1, 0;
		skill AS_VENOMKNIFE, 1, 0;
		getitem 1252,1;
	} else if (BaseJob == Job_Crusader) {
		skill CR_SHRINK, 1, 0;
		getitem 2105,1;
	} else if (BaseJob == Job_Monk) {
		skill MO_KITRANSLATION, 1, 0;
		skill MO_BALKYOUNG, 1, 0;
		getitem 1807,1;
	} else if (BaseJob == Job_Sage) {
		skill SA_CREATECON, 1, 0;
		skill SA_ELEMENTWATER, 1, 0;
		skill SA_ELEMENTGROUND, 1, 0;
		skill SA_ELEMENTFIRE, 1, 0;
		skill SA_ELEMENTWIND, 1, 0;
		getitem 1550,1;
	} else if (BaseJob == Job_Rogue) {
		skill RG_CLOSECONFINE, 1, 0;
		getitem 1714,1;
		getitem 1750,300;
	} else if (BaseJob == Job_Alchemist) {
		skill AM_BIOETHICS, 1, 0;
		getitem 1360,1;
	} else if (BaseJob == Job_Bard) {
		skill BA_PANGVOICE, 1, 0;
		getitem 1909,1;
		getitem 1714,1;
		getitem 1750,300;
	} else if (BaseJob == Job_Dancer) {
		skill DC_WINKCHARM, 1, 0;
		getitem 1960,1;
		getitem 1714,1;
		getitem 1750,300;
	}
	return;

//OnInit:
//	.rebirth_blevel = 99;    // Minimum base level to reborn OR change to third class
//	.rebirth_jlevel = 50;    // Minimum base job level to reborn OR change to third class
//	.jobchange_first = 10;   // Minimum job level to turn into 1st class
//	.jobchange_second = 50;  // Minimum job level to turn into 2nd class
//	.third_classes = 0;      // Enable third classes? (1: yes / 0: no)
//	.supernovice_level = 45; // Minimum base level to turn into Super Novice
//	.linear_jobchange = 1;   // Enforce linear class changes? (1: yes / 0: no)
//	.skill_point_check = 1;  // Force player to use up all skill points? (1: yes / 0: no)
//	.platinum = 1;           // Get platinum skills automatically? (1: yes / 0: no)
//	end;
}

//===================================================
// Warp Points / View Points Function
//===================================================
function	script	F_KafReset	{
	cutin "", 255;
	set .@ResetStat,5000;	// Zeny for stat reset
	set .@ResetSkill,5000;	// Zeny for skill reset
	set .@ResetBoth,9000;	// Zeny for resetting both together

	mes "[Kafra Employee]";
	mes "Reset Stats: "+ .@ResetStat +"z";
	mes "Reset Skills: "+ .@ResetSkill +"z";
	mes "Reset Both: "+ .@ResetBoth +"z";
	mes "Please select the service you want:";
	next;
	switch(select("^FF3355Reset Skills:Reset Stats:Reset Both^000000:Cancel")) {
	case 1:
		mes "[Kafra Employee]";
		if (Zeny < .@ResetSkill) {
			mes "Sorry, you don't have enough Zeny.";
			close;
		}
		Zeny -= .@ResetSkill;
		sc_end SC_ALL;
		resetskill;
		mes "There you go!";
		close;
	case 2:
		mes "[Kafra Employee]";
		if (Zeny < .@ResetStat) {
			mes "Sorry, you don't have enough Zeny.";
			close;
		}
		Zeny -= .@ResetStat;
		resetstatus;
		mes "There you go!";
		close;
	case 3:
		mes "[Kafra Employee]";
		if (Zeny < .@ResetBoth) {
			mes "Sorry, you don't have enough Zeny.";
			close;
		}
		Zeny -= .@ResetBoth;
		sc_end SC_ALL;
		resetskill;
		resetstatus;
		mes "There you go!";
		close;
	case 4:
		close;
	}
}